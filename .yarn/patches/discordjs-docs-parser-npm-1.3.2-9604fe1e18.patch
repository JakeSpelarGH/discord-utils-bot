diff --git a/dist/index.js b/dist/index.js
index 771881f285015f9a172c467f995da6b5e06984e5..16195d2d2e4c7f9d0bf3d989561fb8fc230392b1 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -475,7 +475,7 @@ var _Doc = class extends DocBase {
     /**
      * The documentation base URL.
      */
-    __publicField(this, "baseURL", "https://discord.js.org");
+    __publicField(this, "baseURL", "https://old.discordjs.dev");
     /**
      * The project dissected from the {@link url}.
      */
diff --git a/dist/index.js.map b/dist/index.js.map
index b0b69408ad622086a02bd5dfd1e29bd40ff48315..ddf1e50da4947f360f76aaa2deaf575108962aba 100644
--- a/dist/index.js.map
+++ b/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../src/index.ts","../src/lib/Doc.ts","../src/lib/utils/constants.ts","../src/lib/elements/Base.ts","../src/lib/elements/Element.ts","../src/lib/elements/Param.ts","../src/lib/elements/Event.ts","../src/lib/elements/Method.ts","../src/lib/elements/Prop.ts","../src/lib/elements/Class.ts","../src/lib/elements/Function.ts","../src/lib/elements/Interface.ts","../src/lib/elements/Typedef.ts"],"sourcesContent":["export * from './lib/Doc';\nexport * from './lib/elements/Base';\nexport * from './lib/elements/Class';\nexport * from './lib/elements/Element';\nexport * from './lib/elements/Event';\nexport * from './lib/elements/Function';\nexport * from './lib/elements/Interface';\nexport * from './lib/elements/Method';\nexport * from './lib/elements/Param';\nexport * from './lib/elements/Prop';\nexport * from './lib/elements/Typedef';\nexport { DocTypes, sources } from './lib/utils/constants';\nexport type { DocParserGlobalOptions, ElementJSON, FetchOptions, SearchOptions, SourcesStringUnion } from './lib/utils/interfaces';\n","import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { filterNullishOrEmpty, isNullish, isNullishOrEmpty } from '@sapphire/utilities';\nimport { jaroWinkler } from '@skyra/jaro-winkler';\nimport type { DocElement } from '../lib/elements/Element';\nimport { DocBase } from './elements/Base';\nimport { DocClass } from './elements/Class';\nimport { DocFunction } from './elements/Function';\nimport { DocInterface } from './elements/Interface';\nimport { DocTypedef } from './elements/Typedef';\nimport type { Documentation } from './types/DocgenOutput';\nimport { docCache, sources } from './utils/constants';\nimport type {\n  DocParserGlobalOptions,\n  FetchOptions,\n  FuzzySearchFormat,\n  FuzzySearchFormatWithScore,\n  SearchOptions,\n  SourcesStringUnion\n} from './utils/interfaces';\n\nexport class Doc extends DocBase {\n  /**\n   * The documentation base URL.\n   */\n  public readonly baseURL: string = 'https://discord.js.org';\n  /**\n   * The project dissected from the {@link url}.\n   */\n  public readonly project: string;\n  /**\n   * The repository dissected from the {@link url}.\n   */\n  public readonly repo: string;\n  /**\n   * The branch dissected from the {@link url}.\n   */\n  public readonly branch: string;\n  /**\n   * The raw URL of the JSON that was fetched\n   */\n  public readonly url: string;\n\n  /** @internal */\n  private fuzzySearchFormat: FuzzySearchFormat[];\n\n  public constructor(url: string, docs: Documentation) {\n    super();\n\n    this.url = url;\n    [this.project, this.repo, this.branch] = dissectURL(url);\n\n    this.adoptAll(docs.classes, DocClass);\n    this.adoptAll(docs.typedefs, DocTypedef);\n    this.adoptAll(docs.interfaces, DocInterface);\n    this.adoptAll(docs.functions, DocFunction);\n\n    this.fuzzySearchFormat = this.toFuzzySearchFormat();\n  }\n\n  public get repoURL() {\n    return `https://github.com/${this.project}/${this.repo}/tree/${this.branch}`;\n  }\n\n  public get baseDocsURL() {\n    return `${this.baseURL}/#/docs/${this.repo}/${this.branch}`;\n  }\n\n  /**\n   * Gets the documentation for one element.\n   * @param terms The terms that lead to the element to get. Use multiple terms to get a nested element.\n   * @returns Either the element or null if it doesn't exist.\n   * @example\n   * ```typescript\n   * doc.get('message');\n   * doc.get('message', 'guild');\n   * doc.get('message', 'guild', 'members');\n   * ```\n   */\n  public get(...terms: (string | (DocElement | null)[])[]): DocElement | null {\n    const exclude = Array.isArray(terms[0]) ? (terms.shift() as (DocElement | null)[]) : [];\n\n    terms = terms.filter(filterNullishOrEmpty).map((term) => {\n      if (typeof term === 'string') {\n        return term.toLowerCase();\n      }\n\n      return term;\n    });\n\n    let elem = this.findChild(terms.shift() as string);\n    if (isNullishOrEmpty(elem) || !terms.length) {\n      return elem || null;\n    }\n\n    while (terms.length) {\n      const term = terms.shift();\n\n      if (!term || typeof term !== 'string') {\n        return null;\n      }\n\n      const child: DocElement | undefined = elem!.findChild(term, exclude);\n\n      if (!child) {\n        return null;\n      }\n\n      elem = terms.length && child.typeElement ? child.typeElement : child;\n    }\n\n    return elem ?? null;\n  }\n\n  /**\n   * Searches the documentation for elements matching the provided search query.\n   *\n   * This uses the [Jaro Winkler Distance](https://en.wikipedia.org/wiki/Jaroâ€“Winkler_distance) algorithm\n   * to fuzzily match your query against any potential matches.\n   * The minimum threshold for a match is 80%\n   *\n   * @param query The query to use in the fuzzy search.\n   * @param searchOptions Additional options to pass to the `search` function.\n   * @returns The top 10 hits from the search.\n   * @example\n   * ```typescript\n   * doc.search('message.guild');\n   * doc.search('message.client');\n   * doc.search('message.guild.members');\n   * ```\n   */\n  public search(\n    query: string,\n    { excludePrivateElements = false, jaroWinklerMinimumThreshold = 0.8 }: SearchOptions = {\n      excludePrivateElements: false,\n      jaroWinklerMinimumThreshold: 0.8\n    }\n  ) {\n    // Replace all dots with hashes\n    query = query.replaceAll('.', '#');\n\n    const results = this.findWithJaroWinkler(query, jaroWinklerMinimumThreshold);\n    if (!results.length) return null;\n\n    const filtered = [];\n\n    do {\n      const element = this.get(filtered, ...(results.shift()?.id?.split('#') ?? []));\n\n      if (isNullish(element)) continue;\n      if (excludePrivateElements && element.access === 'private') continue;\n\n      filtered.push(element);\n    } while (results.length > 0);\n\n    return filtered;\n  }\n\n  /** @internal */\n  private toFuzzySearchFormat(): FuzzySearchFormat[] {\n    const parents = Array.from(this.children.values());\n\n    const children = parents.map((parent) => Array.from(parent.children.values())).reduce((a, b) => a.concat(b));\n\n    const formattedParents = parents.map(({ name }) => ({ id: name, name }));\n    const formattedChildren = children.map(({ name, parent }) => ({ id: `${parent ? `${parent.name}#` : ''}${name}`, name }));\n\n    return formattedParents.concat(formattedChildren);\n  }\n\n  /** @internal */\n  private findWithJaroWinkler(query: string, jaroWinklerMinimumThreshold = 0.8): FuzzySearchFormatWithScore[] {\n    const possibles: FuzzySearchFormatWithScore[] = [];\n\n    for (const { id, name } of this.fuzzySearchFormat) {\n      if (!id || !name) continue;\n\n      const score = jaroWinkler(query.toLowerCase(), id.toLowerCase());\n\n      if (score > jaroWinklerMinimumThreshold) {\n        possibles.push({ id, name, score });\n      }\n    }\n\n    return possibles.sort((a, b) => b.score - a.score).slice(0, 10);\n  }\n\n  /**\n   * Global options to configure the Doc output\n   * @property escapeMarkdownLinks Whether to escape markdown links in the output. (default: `false`)\n   * @property descriptionLimit The maximum number of characters to show in the description. (default: `1500`)\n   */\n  public static globalOptions: DocParserGlobalOptions = {\n    escapeMarkdownLinks: false,\n    descriptionLimit: 1500\n  };\n\n  /**\n   * Sets the {@link Doc.globalOptions}. You can provide a partial of the options to update.\n   * @param options The {@link DocParserGlobalOptions} to set\n   */\n  public static setGlobalOptions(options: Partial<DocParserGlobalOptions>) {\n    Doc.globalOptions = {\n      ...Doc.globalOptions,\n      ...options\n    };\n  }\n\n  /**\n   * Fetches the documentation JSON file and builds up a {@link Doc} object.\n   * @param sourceName The name of the source to fetch.\n   * @param fetchOptions Additional options to pass to the `fetch` function.\n   * @returns An instance of {@link Doc}\n   * @example\n   * ```javascript\n   * const { Doc } = require('discordjs-docs-parser');\n   *\n   * const doc = await Doc.fetch('stable');\n   * ```\n   * @example\n   * ```typescript\n   * import { Doc } from 'discordjs-docs-parser';\n   *\n   * const doc = await Doc.fetch('collection', { force: true });\n   * ```\n   */\n  public static async fetch(sourceName: SourcesStringUnion, fetchOptions: FetchOptions = {}) {\n    if (!fetchOptions.force && docCache.has(sourceName)) {\n      return docCache.get(sourceName)!;\n    }\n\n    const url = sources.get(sourceName);\n    if (!url) {\n      throw new Error(\n        '[DiscordJsDocsParser] An invalid source was provided. The valid sources are \"stable\", \"main\", \"rpc\", \"collection\", \"builders\", and \"voice\" '\n      );\n    }\n\n    try {\n      const data = await fetch<Documentation>(url, FetchResultTypes.JSON);\n      const doc = new Doc(url, data);\n      docCache.set(sourceName, doc);\n      return doc;\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nfunction dissectURL(url: string): [project: string, repo: string, branch: string] {\n  const parts = url.slice(34).split('/');\n\n  if (url === sources.get('rpc')) {\n    return [parts[0], parts[1], parts[3].slice(0, -5)];\n  }\n\n  return [parts[0], parts[3], parts[4].slice(0, -5)];\n}\n","import type { Doc } from '../Doc';\nimport type { SourcesStringUnion } from './interfaces';\n\nexport const docCache = new Map<SourcesStringUnion, Doc>();\n\n/**\n * The sources supported by this library\n */\nexport const sources = new Map<SourcesStringUnion, string>([\n  ['stable', 'https://raw.githubusercontent.com/discordjs/docs/main/discord.js/stable.json'],\n  ['main', 'https://raw.githubusercontent.com/discordjs/docs/main/discord.js/main.json'],\n  ['rpc', 'https://raw.githubusercontent.com/discordjs/rpc/docs/master.json'],\n  ['collection', 'https://raw.githubusercontent.com/discordjs/docs/main/collection/main.json'],\n  ['builders', 'https://raw.githubusercontent.com/discordjs/docs/main/builders/main.json'],\n  ['voice', 'https://raw.githubusercontent.com/discordjs/docs/main/voice/main.json'],\n  ['rest', 'https://raw.githubusercontent.com/discordjs/docs/main/rest/main.json']\n]);\n\nexport enum DocTypes {\n  Class = 'class',\n  Event = 'event',\n  Function = 'function',\n  Interface = 'interface',\n  Method = 'method',\n  Param = 'param',\n  Prop = 'prop',\n  Typedef = 'typedef'\n}\n","import type { Constructor } from '@sapphire/utilities';\nimport type { DocIterateeUnion } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport type { DocTypesToClassType } from '../utils/interfaces';\nimport type { DocClass } from './Class';\nimport type { DocElement } from './Element';\nimport type { DocEvent } from './Event';\nimport type { DocInterface } from './Interface';\nimport type { DocMethod } from './Method';\nimport type { DocParam } from './Param';\nimport type { DocProp } from './Prop';\nimport type { DocTypedef } from './Typedef';\n\nexport class DocBase {\n  /** The children that belong to this element */\n  public children: Map<string, DocEvent | DocMethod | DocParam | DocProp>;\n\n  /** The type of this element */\n  public docType: DocTypes | null;\n\n  /** The name of this element */\n  public name: string | null;\n\n  public constructor(docType: DocTypes | null = null, name: string | null = null) {\n    this.children = new Map();\n    this.docType = docType;\n    this.name = name;\n  }\n\n  /** @internal */\n  public adoptAll(\n    iterable: DocIterateeUnion[],\n    Constructor: Constructor<DocClass | DocTypedef | DocInterface | DocProp | DocMethod | DocEvent | DocParam>\n  ) {\n    if (!iterable) return;\n    for (const iteratee of iterable) {\n      this.addChild(new Constructor(this, iteratee));\n    }\n  }\n\n  /** @internal */\n  public findChild(query: string, exclude: (DocElement | null)[] = []): DocElement | undefined {\n    if (!query) {\n      return undefined;\n    }\n\n    query = query.toLowerCase();\n\n    let docType: DocTypes | null = null;\n    if (query.endsWith('()')) {\n      query = query.slice(0, -2);\n      docType = DocTypes.Method;\n    } else if (query.startsWith('e-')) {\n      query = query.slice(2);\n      docType = DocTypes.Event;\n    } else if (query.startsWith('s-')) {\n      query = query.slice(2);\n    }\n\n    return [...this.children.values()].find(\n      (child) => !exclude.includes(child) && child.name?.toLowerCase() === query && (!docType || child.docType === docType)\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private addChild(child: DocClass | DocTypedef | DocInterface | DocProp | DocMethod | DocEvent | DocParam) {\n    this.children.set(`${child.name?.toLowerCase()}-${child.docType}`, child);\n  }\n\n  /** @internal */\n  private childrenOfType<T extends DocTypes>(type: T): DocTypesToClassType[T][] | null {\n    const filtered = Array.from(this.children.values()).filter((child) => child.docType === type);\n\n    return filtered.length ? (filtered as unknown as DocTypesToClassType[T][]) : null;\n  }\n\n  /**\n   * The stored Classes for this current documentation source\n   */\n  public get classes() {\n    return this.childrenOfType(DocTypes.Class);\n  }\n\n  /**\n   * The stored Functions for this current documentation source\n   */\n  public get functions() {\n    return this.childrenOfType(DocTypes.Function);\n  }\n\n  /**\n   * The stored Typedefs for this current documentation source\n   */\n\n  public get typedefs() {\n    return this.childrenOfType(DocTypes.Typedef);\n  }\n\n  /**\n   * The stored Interfaces for this current documentation source\n   */\n\n  public get interfaces() {\n    return this.childrenOfType(DocTypes.Interface);\n  }\n\n  /**\n   * The stored Props for this current documentation source\n   */\n\n  public get props() {\n    return this.childrenOfType(DocTypes.Prop);\n  }\n\n  /**\n   * The stored Methods for this current documentation source\n   */\n\n  public get methods() {\n    return this.childrenOfType(DocTypes.Method);\n  }\n\n  /**\n   * The stored Events for this current documentation source\n   */\n\n  public get events() {\n    return this.childrenOfType(DocTypes.Event);\n  }\n\n  /**\n   * The stored Params for this current documentation source\n   */\n\n  public get params() {\n    return this.childrenOfType(DocTypes.Param);\n  }\n}\n","import { cutText, filterNullAndUndefinedAndEmpty, isNullishOrEmpty } from '@sapphire/utilities';\nimport { Doc } from '../Doc';\nimport type { DocIterateeUnion, DocumentationClassMeta, DocumentationReturns } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport type { ElementJSON } from '../utils/interfaces';\nimport { DocBase } from './Base';\n\n/**\n * Represents any type of element in the DiscordJS documentation\n */\nexport class DocElement extends DocBase {\n  public doc: Doc;\n  public parent: DocElement | null;\n\n  public description: string | null;\n  public meta: DocumentationClassMeta | null;\n\n  public returns: DocumentationReturns | DocumentationReturns[] | string[][][] | null;\n  public examples: string[] | null;\n  public type: string[] | null;\n  public nullable: boolean;\n  public deprecated: boolean;\n  public access: string;\n  public scope: string | null;\n  public extends: string[][] | null;\n  public implements: string[][] | null;\n\n  public constructor(doc: Doc, docType: DocTypes, data: DocIterateeUnion, parent?: DocElement) {\n    super(docType, data.name);\n    this.doc = doc;\n    this.parent = parent ?? null;\n\n    this.meta = Reflect.get(data, 'meta') ?? null;\n\n    this.description = Reflect.get(data, 'description') ?? null;\n    this.scope = Reflect.get(data, 'scope') ?? null;\n    this.extends = Reflect.get(data, 'extends') ?? null;\n    this.implements = Reflect.get(data, 'implements') ?? null;\n\n    this.returns = null;\n    this.examples = null;\n    this.type = null;\n    this.nullable = false;\n\n    this.deprecated = Reflect.get(data, 'deprecated') ?? false;\n    this.access = Reflect.get(data, 'access') ?? 'public';\n  }\n\n  /**\n   * Returns the URL to this element on the [discord.js documentation](https://discord.js.org/).\n   */\n  public get url(): string | null {\n    const path = this.parent\n      ? `${this.parent.docType}/${this.parent.name}?scrollTo=${this.anchor || ''}${this.name}`\n      : `${this.docType}/${this.name}`;\n\n    return `${this.doc.baseDocsURL}/${path || 'general/welcome'}`;\n  }\n\n  /**\n   * Returns the url to the source code for this element.\n   */\n  public get sourceURL() {\n    if (isNullishOrEmpty(this.doc.repoURL) || isNullishOrEmpty(this.meta)) return null;\n\n    const { path, file, line } = this.meta;\n    return `${this.doc.repoURL}/${path}/${file}#L${line}`;\n  }\n\n  /**\n   * Returns the pre-formatted name for this element.\n   * This is either the name, or if it is nullish then an empty string.\n   */\n  public get formattedName(): string {\n    return this.name ?? '';\n  }\n\n  /**\n   * Returns the pre-formatted description of this element.\n   */\n  public get formattedDescription(): string {\n    let result = this.formatText(this.description);\n\n    if (result.length > Doc.globalOptions.descriptionLimit) {\n      result = `${cutText(result, Doc.globalOptions.descriptionLimit)}\\nDescription truncated. View full description [here](${this.url}).`;\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns the pre-formatted link of this element.\n   * By default this will be returned as a regular markdown masked link.\n   * You can further customize this by setting {@link Doc.globalOptions.escapeMarkdownLinks}\n   * which will wrap the links with `<...>` so sending the link through a Webhook or Interaction reply\n   * will not embed that link in the chat.\n   */\n  public get link(): string {\n    if (!this.url) return '';\n\n    const escapedUrl = `${Doc.globalOptions.escapeMarkdownLinks ? '<' : ''}${this.url}${Doc.globalOptions.escapeMarkdownLinks ? '>' : ''}`;\n\n    return `[${this.formattedName}](${escapedUrl})`;\n  }\n\n  /**\n   * Returns whether this element is static or not.\n   */\n  public get static(): boolean {\n    return this.scope === 'static';\n  }\n\n  /** @internal */\n  public get typeElement(): DocElement | null {\n    if (isNullishOrEmpty(this.type)) return null;\n\n    return (\n      this.type\n        .filter((text) => /^\\w+$/.test(text))\n        .map((text) => this.doc.findChild(text.toLowerCase()))\n        .find((elem) => elem) ?? null\n    );\n  }\n\n  /** @internal */\n  private get anchor() {\n    if (this.static) return 's-';\n    else if (this.docType === DocTypes.Event) return 'e-';\n    return null;\n  }\n\n  /**\n   * Overrides what should be returned when calling `JSON.stringify` on this class\n   */\n  public toJSON(): ElementJSON {\n    const json: ElementJSON = {\n      name: this.name ?? '',\n      description: this.description ?? '',\n      internal_type: this.docType\n    };\n\n    if (this.props) {\n      Reflect.set(json, 'props', this.props.map((prop) => prop.name).filter(filterNullAndUndefinedAndEmpty));\n    }\n\n    if (this.parent) {\n      Reflect.set(json, 'parent', this.parent.name ?? undefined);\n    }\n\n    if (this.methods) {\n      Reflect.set(json, 'methods', this.methods.map((method) => method.name).filter(filterNullAndUndefinedAndEmpty));\n    }\n\n    if (this.events) {\n      Reflect.set(json, 'events', this.events.map((event) => event.name).filter(filterNullAndUndefinedAndEmpty));\n    }\n\n    if (this.params) {\n      Reflect.set(\n        json,\n        'params',\n        this.params.map((param) => JSON.stringify(param))\n      );\n    }\n\n    if (this.type) {\n      Reflect.set(json, 'type', this.type.join(''));\n    }\n\n    if (this.examples) {\n      Reflect.set(json, 'examples', this.examples);\n    }\n\n    return json;\n  }\n\n  /**\n   * @internal\n   */\n  private formatText(text: string | null) {\n    if (isNullishOrEmpty(text)) return '';\n\n    return text\n      .replace(/\\{@link (.+?)\\}/g, (_match, name) => {\n        const element = this.doc.get(...name.split(/\\.|#/));\n        return element ? element.link : name;\n      })\n      .replace(/(```[^]+?```)|(^[*-].+$)?\\n(?![*-])/gm, (match, codeblock, hasListBefore) => {\n        if (codeblock) return codeblock;\n        if (hasListBefore) return match;\n        return ' ';\n      })\n      .replace(/<(info|warn)>([^]+?)<\\/(?:\\1)>/g, '\\n**$2**\\n')\n      .replace(/<\\/?p>/g, '') // remove paragraph tags\n      .replace(/<\\/?code>/g, '`') // format code tags\n      .replace(/<a href=\"(.+)\">(.+)<\\/a>/g, '[$2]($1)') // format anchor tags\n      .replace(/\\[(.+?)\\]\\((.+?)\\)/g, '[$1](<$2>)'); // escape markdown links\n  }\n}\n","import type { DocumentationParameter } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\n\n/**\n * Represents a parameter of a {@link DocElement}.\n */\nexport class DocParam extends DocElement {\n  public optional: boolean;\n  public variable: boolean;\n\n  public constructor(parent: DocElement, data: DocumentationParameter) {\n    super(parent.doc, DocTypes.Param, data, parent);\n    this.type = data.type.flat(5);\n    this.optional = data.optional ?? false;\n    this.variable = data.variable ?? false;\n  }\n\n  /**\n   * Returns the formatted name of the parameter.\n   *\n   * If this parameter is optional it will be wrapped in square brackets.\n   * Otherwise just the name will be returned.\n   * Furthermore, in both cases, inline code backticks will be wrapped around the parameter.\n   */\n  public override get formattedName() {\n    return this.optional ? `\\`[${this.name}]\\`` : `\\`${this.name}\\``;\n  }\n\n  /**\n   * Method Parameters cannot be navigated to on the [discord.js docs](https://discord.js.org/) so this always returns `null`.\n   */\n  // eslint-disable-next-line @typescript-eslint/class-literal-property-style\n  public override get url() {\n    return null;\n  }\n}\n","import type { DocumentationClassEvent } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocParam } from './Param';\n\n/**\n * Represents an event on a {@link DocElement}\n *\n * An example of this is the many events on the `Client` class such as `ready`\n */\nexport class DocEvent extends DocElement {\n  public constructor(parent: DocElement, data: DocumentationClassEvent) {\n    super(parent.doc, DocTypes.Event, data, parent);\n    this.adoptAll(data.params, DocParam);\n  }\n\n  /**\n   * Returns the formatted name of the property.\n   *\n   * This includes the parent name, if a parent is present\n   * followed by a `#` and the name of the event.\n   */\n  public override get formattedName() {\n    return `${this.parent?.name ?? ''}#${this.name}`;\n  }\n}\n","import type { DocumentationClassMethod, DocumentationReturns } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocParam } from './Param';\n\n/**\n * Represents a method on a {@link DocElement}\n */\nexport class DocMethod extends DocElement {\n  public constructor(parent: DocElement, data: DocumentationClassMethod) {\n    super(parent.doc, DocTypes.Method, data, parent);\n\n    this.examples = data.examples || null;\n    this.returns = data.returns ?? null;\n    this.scope = data.scope ?? null;\n\n    if (data.params) {\n      this.adoptAll(data.params, DocParam);\n    }\n  }\n\n  /**\n   * Returns the formatted name of the property.\n   *\n   * This includes the parent name, if a parent is present\n   * followed by either a `.` or `#` depending on whether this property is static (`.`) or not (`#`).\n   * and finally the name of the property itself, followed by `()` because this a method.\n   */\n  public override get formattedName() {\n    return `${this.parent?.name ?? ''}${this.static ? '.' : '#'}${this.name}()`;\n  }\n\n  /**\n   * Overrides what should be returned when calling `JSON.stringify` on this class\n   */\n  public override toJSON() {\n    const json = super.toJSON();\n    const returnType = this.returns ? ((this.returns as DocumentationReturns).types || this.returns).flat(5).join('') : 'void';\n\n    json.returns = { type: returnType };\n\n    if (this.returns && (this.returns as DocumentationReturns).description) {\n      json.returns.description = (this.returns as DocumentationReturns).description;\n    }\n\n    return json;\n  }\n}\n","import type { DocumentationClassProperty } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\n\n/**\n * Represents a property on a class.\n */\nexport class DocProp extends DocElement {\n  public constructor(parent: DocElement, data: DocumentationClassProperty) {\n    super(parent.doc, DocTypes.Prop, data, parent);\n    this.scope = data.scope ?? null;\n    this.type = data.type.flat(5);\n    this.nullable = data.nullable || false;\n  }\n\n  /**\n   * Returns the formatted name of the property.\n   *\n   * This includes the parent name, if a parent is present\n   * followed by either a `.` or `#` depending on whether this property is static (`.`) or not (`#`).\n   * and finally the name of the property itself.\n   */\n  public override get formattedName() {\n    return `${this.parent?.name ?? ''}${this.static ? '.' : '#'}${this.name}`;\n  }\n}\n","import type { Doc } from '../Doc';\nimport type { DocumentationClass, DocumentationClassConstructor } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocEvent } from './Event';\nimport { DocMethod } from './Method';\nimport { DocProp } from './Prop';\n\nexport class DocClass extends DocElement {\n  public readonly construct: DocumentationClassConstructor;\n\n  public constructor(doc: Doc, data: DocumentationClass) {\n    super(doc, DocTypes.Class, data);\n\n    this.construct = data.construct;\n\n    this.adoptAll(data.props, DocProp);\n    this.adoptAll(data.methods, DocMethod);\n    this.adoptAll(data.events, DocEvent);\n  }\n}\n","import type { Doc } from '../Doc';\nimport type { DocumentationFunction } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocParam } from './Param';\n\n/**\n * Represents a Function in the DiscordJS documentation\n */\nexport class DocFunction extends DocElement {\n  public constructor(doc: Doc, data: DocumentationFunction) {\n    super(doc, DocTypes.Function, data);\n\n    this.examples = data.examples || null;\n    this.returns = data.returns ?? null;\n    this.scope = data.scope ?? null;\n\n    if (data.params) {\n      this.adoptAll(data.params, DocParam);\n    }\n  }\n}\n","import type { Doc } from '../Doc';\nimport type { DocumentationInterface } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocMethod } from './Method';\nimport { DocProp } from './Prop';\n\n/**\n * Represents an instance of a interface in the DiscordJS documentation\n */\nexport class DocInterface extends DocElement {\n  public constructor(doc: Doc, data: DocumentationInterface) {\n    super(doc, DocTypes.Interface, data);\n    this.adoptAll(data.props, DocProp);\n    this.adoptAll(data.methods, DocMethod);\n  }\n}\n","import type { Doc } from '../Doc';\nimport type { DocumentationTypeDefinition } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\n\n/**\n * Represents an instance of a Typedef in the DiscordJS documentation\n */\nexport class DocTypedef extends DocElement {\n  public constructor(doc: Doc, data: DocumentationTypeDefinition) {\n    super(doc, DocTypes.Typedef, data);\n    this.type = data.type?.flat(5) ?? null;\n  }\n}\n"],"mappings":"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","names":["import_utilities","DocTypes"]}
\ No newline at end of file
+{"version":3,"sources":["../src/index.ts","../src/lib/Doc.ts","../src/lib/utils/constants.ts","../src/lib/elements/Base.ts","../src/lib/elements/Element.ts","../src/lib/elements/Param.ts","../src/lib/elements/Event.ts","../src/lib/elements/Method.ts","../src/lib/elements/Prop.ts","../src/lib/elements/Class.ts","../src/lib/elements/Function.ts","../src/lib/elements/Interface.ts","../src/lib/elements/Typedef.ts"],"sourcesContent":["export * from './lib/Doc';\nexport * from './lib/elements/Base';\nexport * from './lib/elements/Class';\nexport * from './lib/elements/Element';\nexport * from './lib/elements/Event';\nexport * from './lib/elements/Function';\nexport * from './lib/elements/Interface';\nexport * from './lib/elements/Method';\nexport * from './lib/elements/Param';\nexport * from './lib/elements/Prop';\nexport * from './lib/elements/Typedef';\nexport { DocTypes, sources } from './lib/utils/constants';\nexport type { DocParserGlobalOptions, ElementJSON, FetchOptions, SearchOptions, SourcesStringUnion } from './lib/utils/interfaces';\n","import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { filterNullishOrEmpty, isNullish, isNullishOrEmpty } from '@sapphire/utilities';\nimport { jaroWinkler } from '@skyra/jaro-winkler';\nimport type { DocElement } from '../lib/elements/Element';\nimport { DocBase } from './elements/Base';\nimport { DocClass } from './elements/Class';\nimport { DocFunction } from './elements/Function';\nimport { DocInterface } from './elements/Interface';\nimport { DocTypedef } from './elements/Typedef';\nimport type { Documentation } from './types/DocgenOutput';\nimport { docCache, sources } from './utils/constants';\nimport type {\n  DocParserGlobalOptions,\n  FetchOptions,\n  FuzzySearchFormat,\n  FuzzySearchFormatWithScore,\n  SearchOptions,\n  SourcesStringUnion\n} from './utils/interfaces';\n\nexport class Doc extends DocBase {\n  /**\n   * The documentation base URL.\n   */\n  public readonly baseURL: string = 'https://old.discord.js.dev';\n  /**\n   * The project dissected from the {@link url}.\n   */\n  public readonly project: string;\n  /**\n   * The repository dissected from the {@link url}.\n   */\n  public readonly repo: string;\n  /**\n   * The branch dissected from the {@link url}.\n   */\n  public readonly branch: string;\n  /**\n   * The raw URL of the JSON that was fetched\n   */\n  public readonly url: string;\n\n  /** @internal */\n  private fuzzySearchFormat: FuzzySearchFormat[];\n\n  public constructor(url: string, docs: Documentation) {\n    super();\n\n    this.url = url;\n    [this.project, this.repo, this.branch] = dissectURL(url);\n\n    this.adoptAll(docs.classes, DocClass);\n    this.adoptAll(docs.typedefs, DocTypedef);\n    this.adoptAll(docs.interfaces, DocInterface);\n    this.adoptAll(docs.functions, DocFunction);\n\n    this.fuzzySearchFormat = this.toFuzzySearchFormat();\n  }\n\n  public get repoURL() {\n    return `https://github.com/${this.project}/${this.repo}/tree/${this.branch}`;\n  }\n\n  public get baseDocsURL() {\n    return `${this.baseURL}/#/docs/${this.repo}/${this.branch}`;\n  }\n\n  /**\n   * Gets the documentation for one element.\n   * @param terms The terms that lead to the element to get. Use multiple terms to get a nested element.\n   * @returns Either the element or null if it doesn't exist.\n   * @example\n   * ```typescript\n   * doc.get('message');\n   * doc.get('message', 'guild');\n   * doc.get('message', 'guild', 'members');\n   * ```\n   */\n  public get(...terms: (string | (DocElement | null)[])[]): DocElement | null {\n    const exclude = Array.isArray(terms[0]) ? (terms.shift() as (DocElement | null)[]) : [];\n\n    terms = terms.filter(filterNullishOrEmpty).map((term) => {\n      if (typeof term === 'string') {\n        return term.toLowerCase();\n      }\n\n      return term;\n    });\n\n    let elem = this.findChild(terms.shift() as string);\n    if (isNullishOrEmpty(elem) || !terms.length) {\n      return elem || null;\n    }\n\n    while (terms.length) {\n      const term = terms.shift();\n\n      if (!term || typeof term !== 'string') {\n        return null;\n      }\n\n      const child: DocElement | undefined = elem!.findChild(term, exclude);\n\n      if (!child) {\n        return null;\n      }\n\n      elem = terms.length && child.typeElement ? child.typeElement : child;\n    }\n\n    return elem ?? null;\n  }\n\n  /**\n   * Searches the documentation for elements matching the provided search query.\n   *\n   * This uses the [Jaro Winkler Distance](https://en.wikipedia.org/wiki/Jaroâ€“Winkler_distance) algorithm\n   * to fuzzily match your query against any potential matches.\n   * The minimum threshold for a match is 80%\n   *\n   * @param query The query to use in the fuzzy search.\n   * @param searchOptions Additional options to pass to the `search` function.\n   * @returns The top 10 hits from the search.\n   * @example\n   * ```typescript\n   * doc.search('message.guild');\n   * doc.search('message.client');\n   * doc.search('message.guild.members');\n   * ```\n   */\n  public search(\n    query: string,\n    { excludePrivateElements = false, jaroWinklerMinimumThreshold = 0.8 }: SearchOptions = {\n      excludePrivateElements: false,\n      jaroWinklerMinimumThreshold: 0.8\n    }\n  ) {\n    // Replace all dots with hashes\n    query = query.replaceAll('.', '#');\n\n    const results = this.findWithJaroWinkler(query, jaroWinklerMinimumThreshold);\n    if (!results.length) return null;\n\n    const filtered = [];\n\n    do {\n      const element = this.get(filtered, ...(results.shift()?.id?.split('#') ?? []));\n\n      if (isNullish(element)) continue;\n      if (excludePrivateElements && element.access === 'private') continue;\n\n      filtered.push(element);\n    } while (results.length > 0);\n\n    return filtered;\n  }\n\n  /** @internal */\n  private toFuzzySearchFormat(): FuzzySearchFormat[] {\n    const parents = Array.from(this.children.values());\n\n    const children = parents.map((parent) => Array.from(parent.children.values())).reduce((a, b) => a.concat(b));\n\n    const formattedParents = parents.map(({ name }) => ({ id: name, name }));\n    const formattedChildren = children.map(({ name, parent }) => ({ id: `${parent ? `${parent.name}#` : ''}${name}`, name }));\n\n    return formattedParents.concat(formattedChildren);\n  }\n\n  /** @internal */\n  private findWithJaroWinkler(query: string, jaroWinklerMinimumThreshold = 0.8): FuzzySearchFormatWithScore[] {\n    const possibles: FuzzySearchFormatWithScore[] = [];\n\n    for (const { id, name } of this.fuzzySearchFormat) {\n      if (!id || !name) continue;\n\n      const score = jaroWinkler(query.toLowerCase(), id.toLowerCase());\n\n      if (score > jaroWinklerMinimumThreshold) {\n        possibles.push({ id, name, score });\n      }\n    }\n\n    return possibles.sort((a, b) => b.score - a.score).slice(0, 10);\n  }\n\n  /**\n   * Global options to configure the Doc output\n   * @property escapeMarkdownLinks Whether to escape markdown links in the output. (default: `false`)\n   * @property descriptionLimit The maximum number of characters to show in the description. (default: `1500`)\n   */\n  public static globalOptions: DocParserGlobalOptions = {\n    escapeMarkdownLinks: false,\n    descriptionLimit: 1500\n  };\n\n  /**\n   * Sets the {@link Doc.globalOptions}. You can provide a partial of the options to update.\n   * @param options The {@link DocParserGlobalOptions} to set\n   */\n  public static setGlobalOptions(options: Partial<DocParserGlobalOptions>) {\n    Doc.globalOptions = {\n      ...Doc.globalOptions,\n      ...options\n    };\n  }\n\n  /**\n   * Fetches the documentation JSON file and builds up a {@link Doc} object.\n   * @param sourceName The name of the source to fetch.\n   * @param fetchOptions Additional options to pass to the `fetch` function.\n   * @returns An instance of {@link Doc}\n   * @example\n   * ```javascript\n   * const { Doc } = require('discordjs-docs-parser');\n   *\n   * const doc = await Doc.fetch('stable');\n   * ```\n   * @example\n   * ```typescript\n   * import { Doc } from 'discordjs-docs-parser';\n   *\n   * const doc = await Doc.fetch('collection', { force: true });\n   * ```\n   */\n  public static async fetch(sourceName: SourcesStringUnion, fetchOptions: FetchOptions = {}) {\n    if (!fetchOptions.force && docCache.has(sourceName)) {\n      return docCache.get(sourceName)!;\n    }\n\n    const url = sources.get(sourceName);\n    if (!url) {\n      throw new Error(\n        '[DiscordJsDocsParser] An invalid source was provided. The valid sources are \"stable\", \"main\", \"rpc\", \"collection\", \"builders\", and \"voice\" '\n      );\n    }\n\n    try {\n      const data = await fetch<Documentation>(url, FetchResultTypes.JSON);\n      const doc = new Doc(url, data);\n      docCache.set(sourceName, doc);\n      return doc;\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nfunction dissectURL(url: string): [project: string, repo: string, branch: string] {\n  const parts = url.slice(34).split('/');\n\n  if (url === sources.get('rpc')) {\n    return [parts[0], parts[1], parts[3].slice(0, -5)];\n  }\n\n  return [parts[0], parts[3], parts[4].slice(0, -5)];\n}\n","import type { Doc } from '../Doc';\nimport type { SourcesStringUnion } from './interfaces';\n\nexport const docCache = new Map<SourcesStringUnion, Doc>();\n\n/**\n * The sources supported by this library\n */\nexport const sources = new Map<SourcesStringUnion, string>([\n  ['stable', 'https://raw.githubusercontent.com/discordjs/docs/main/discord.js/stable.json'],\n  ['main', 'https://raw.githubusercontent.com/discordjs/docs/main/discord.js/main.json'],\n  ['rpc', 'https://raw.githubusercontent.com/discordjs/rpc/docs/master.json'],\n  ['collection', 'https://raw.githubusercontent.com/discordjs/docs/main/collection/main.json'],\n  ['builders', 'https://raw.githubusercontent.com/discordjs/docs/main/builders/main.json'],\n  ['voice', 'https://raw.githubusercontent.com/discordjs/docs/main/voice/main.json'],\n  ['rest', 'https://raw.githubusercontent.com/discordjs/docs/main/rest/main.json']\n]);\n\nexport enum DocTypes {\n  Class = 'class',\n  Event = 'event',\n  Function = 'function',\n  Interface = 'interface',\n  Method = 'method',\n  Param = 'param',\n  Prop = 'prop',\n  Typedef = 'typedef'\n}\n","import type { Constructor } from '@sapphire/utilities';\nimport type { DocIterateeUnion } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport type { DocTypesToClassType } from '../utils/interfaces';\nimport type { DocClass } from './Class';\nimport type { DocElement } from './Element';\nimport type { DocEvent } from './Event';\nimport type { DocInterface } from './Interface';\nimport type { DocMethod } from './Method';\nimport type { DocParam } from './Param';\nimport type { DocProp } from './Prop';\nimport type { DocTypedef } from './Typedef';\n\nexport class DocBase {\n  /** The children that belong to this element */\n  public children: Map<string, DocEvent | DocMethod | DocParam | DocProp>;\n\n  /** The type of this element */\n  public docType: DocTypes | null;\n\n  /** The name of this element */\n  public name: string | null;\n\n  public constructor(docType: DocTypes | null = null, name: string | null = null) {\n    this.children = new Map();\n    this.docType = docType;\n    this.name = name;\n  }\n\n  /** @internal */\n  public adoptAll(\n    iterable: DocIterateeUnion[],\n    Constructor: Constructor<DocClass | DocTypedef | DocInterface | DocProp | DocMethod | DocEvent | DocParam>\n  ) {\n    if (!iterable) return;\n    for (const iteratee of iterable) {\n      this.addChild(new Constructor(this, iteratee));\n    }\n  }\n\n  /** @internal */\n  public findChild(query: string, exclude: (DocElement | null)[] = []): DocElement | undefined {\n    if (!query) {\n      return undefined;\n    }\n\n    query = query.toLowerCase();\n\n    let docType: DocTypes | null = null;\n    if (query.endsWith('()')) {\n      query = query.slice(0, -2);\n      docType = DocTypes.Method;\n    } else if (query.startsWith('e-')) {\n      query = query.slice(2);\n      docType = DocTypes.Event;\n    } else if (query.startsWith('s-')) {\n      query = query.slice(2);\n    }\n\n    return [...this.children.values()].find(\n      (child) => !exclude.includes(child) && child.name?.toLowerCase() === query && (!docType || child.docType === docType)\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private addChild(child: DocClass | DocTypedef | DocInterface | DocProp | DocMethod | DocEvent | DocParam) {\n    this.children.set(`${child.name?.toLowerCase()}-${child.docType}`, child);\n  }\n\n  /** @internal */\n  private childrenOfType<T extends DocTypes>(type: T): DocTypesToClassType[T][] | null {\n    const filtered = Array.from(this.children.values()).filter((child) => child.docType === type);\n\n    return filtered.length ? (filtered as unknown as DocTypesToClassType[T][]) : null;\n  }\n\n  /**\n   * The stored Classes for this current documentation source\n   */\n  public get classes() {\n    return this.childrenOfType(DocTypes.Class);\n  }\n\n  /**\n   * The stored Functions for this current documentation source\n   */\n  public get functions() {\n    return this.childrenOfType(DocTypes.Function);\n  }\n\n  /**\n   * The stored Typedefs for this current documentation source\n   */\n\n  public get typedefs() {\n    return this.childrenOfType(DocTypes.Typedef);\n  }\n\n  /**\n   * The stored Interfaces for this current documentation source\n   */\n\n  public get interfaces() {\n    return this.childrenOfType(DocTypes.Interface);\n  }\n\n  /**\n   * The stored Props for this current documentation source\n   */\n\n  public get props() {\n    return this.childrenOfType(DocTypes.Prop);\n  }\n\n  /**\n   * The stored Methods for this current documentation source\n   */\n\n  public get methods() {\n    return this.childrenOfType(DocTypes.Method);\n  }\n\n  /**\n   * The stored Events for this current documentation source\n   */\n\n  public get events() {\n    return this.childrenOfType(DocTypes.Event);\n  }\n\n  /**\n   * The stored Params for this current documentation source\n   */\n\n  public get params() {\n    return this.childrenOfType(DocTypes.Param);\n  }\n}\n","import { cutText, filterNullAndUndefinedAndEmpty, isNullishOrEmpty } from '@sapphire/utilities';\nimport { Doc } from '../Doc';\nimport type { DocIterateeUnion, DocumentationClassMeta, DocumentationReturns } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport type { ElementJSON } from '../utils/interfaces';\nimport { DocBase } from './Base';\n\n/**\n * Represents any type of element in the DiscordJS documentation\n */\nexport class DocElement extends DocBase {\n  public doc: Doc;\n  public parent: DocElement | null;\n\n  public description: string | null;\n  public meta: DocumentationClassMeta | null;\n\n  public returns: DocumentationReturns | DocumentationReturns[] | string[][][] | null;\n  public examples: string[] | null;\n  public type: string[] | null;\n  public nullable: boolean;\n  public deprecated: boolean;\n  public access: string;\n  public scope: string | null;\n  public extends: string[][] | null;\n  public implements: string[][] | null;\n\n  public constructor(doc: Doc, docType: DocTypes, data: DocIterateeUnion, parent?: DocElement) {\n    super(docType, data.name);\n    this.doc = doc;\n    this.parent = parent ?? null;\n\n    this.meta = Reflect.get(data, 'meta') ?? null;\n\n    this.description = Reflect.get(data, 'description') ?? null;\n    this.scope = Reflect.get(data, 'scope') ?? null;\n    this.extends = Reflect.get(data, 'extends') ?? null;\n    this.implements = Reflect.get(data, 'implements') ?? null;\n\n    this.returns = null;\n    this.examples = null;\n    this.type = null;\n    this.nullable = false;\n\n    this.deprecated = Reflect.get(data, 'deprecated') ?? false;\n    this.access = Reflect.get(data, 'access') ?? 'public';\n  }\n\n  /**\n   * Returns the URL to this element on the [discord.js documentation](https://discord.js.org/).\n   */\n  public get url(): string | null {\n    const path = this.parent\n      ? `${this.parent.docType}/${this.parent.name}?scrollTo=${this.anchor || ''}${this.name}`\n      : `${this.docType}/${this.name}`;\n\n    return `${this.doc.baseDocsURL}/${path || 'general/welcome'}`;\n  }\n\n  /**\n   * Returns the url to the source code for this element.\n   */\n  public get sourceURL() {\n    if (isNullishOrEmpty(this.doc.repoURL) || isNullishOrEmpty(this.meta)) return null;\n\n    const { path, file, line } = this.meta;\n    return `${this.doc.repoURL}/${path}/${file}#L${line}`;\n  }\n\n  /**\n   * Returns the pre-formatted name for this element.\n   * This is either the name, or if it is nullish then an empty string.\n   */\n  public get formattedName(): string {\n    return this.name ?? '';\n  }\n\n  /**\n   * Returns the pre-formatted description of this element.\n   */\n  public get formattedDescription(): string {\n    let result = this.formatText(this.description);\n\n    if (result.length > Doc.globalOptions.descriptionLimit) {\n      result = `${cutText(result, Doc.globalOptions.descriptionLimit)}\\nDescription truncated. View full description [here](${this.url}).`;\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns the pre-formatted link of this element.\n   * By default this will be returned as a regular markdown masked link.\n   * You can further customize this by setting {@link Doc.globalOptions.escapeMarkdownLinks}\n   * which will wrap the links with `<...>` so sending the link through a Webhook or Interaction reply\n   * will not embed that link in the chat.\n   */\n  public get link(): string {\n    if (!this.url) return '';\n\n    const escapedUrl = `${Doc.globalOptions.escapeMarkdownLinks ? '<' : ''}${this.url}${Doc.globalOptions.escapeMarkdownLinks ? '>' : ''}`;\n\n    return `[${this.formattedName}](${escapedUrl})`;\n  }\n\n  /**\n   * Returns whether this element is static or not.\n   */\n  public get static(): boolean {\n    return this.scope === 'static';\n  }\n\n  /** @internal */\n  public get typeElement(): DocElement | null {\n    if (isNullishOrEmpty(this.type)) return null;\n\n    return (\n      this.type\n        .filter((text) => /^\\w+$/.test(text))\n        .map((text) => this.doc.findChild(text.toLowerCase()))\n        .find((elem) => elem) ?? null\n    );\n  }\n\n  /** @internal */\n  private get anchor() {\n    if (this.static) return 's-';\n    else if (this.docType === DocTypes.Event) return 'e-';\n    return null;\n  }\n\n  /**\n   * Overrides what should be returned when calling `JSON.stringify` on this class\n   */\n  public toJSON(): ElementJSON {\n    const json: ElementJSON = {\n      name: this.name ?? '',\n      description: this.description ?? '',\n      internal_type: this.docType\n    };\n\n    if (this.props) {\n      Reflect.set(json, 'props', this.props.map((prop) => prop.name).filter(filterNullAndUndefinedAndEmpty));\n    }\n\n    if (this.parent) {\n      Reflect.set(json, 'parent', this.parent.name ?? undefined);\n    }\n\n    if (this.methods) {\n      Reflect.set(json, 'methods', this.methods.map((method) => method.name).filter(filterNullAndUndefinedAndEmpty));\n    }\n\n    if (this.events) {\n      Reflect.set(json, 'events', this.events.map((event) => event.name).filter(filterNullAndUndefinedAndEmpty));\n    }\n\n    if (this.params) {\n      Reflect.set(\n        json,\n        'params',\n        this.params.map((param) => JSON.stringify(param))\n      );\n    }\n\n    if (this.type) {\n      Reflect.set(json, 'type', this.type.join(''));\n    }\n\n    if (this.examples) {\n      Reflect.set(json, 'examples', this.examples);\n    }\n\n    return json;\n  }\n\n  /**\n   * @internal\n   */\n  private formatText(text: string | null) {\n    if (isNullishOrEmpty(text)) return '';\n\n    return text\n      .replace(/\\{@link (.+?)\\}/g, (_match, name) => {\n        const element = this.doc.get(...name.split(/\\.|#/));\n        return element ? element.link : name;\n      })\n      .replace(/(```[^]+?```)|(^[*-].+$)?\\n(?![*-])/gm, (match, codeblock, hasListBefore) => {\n        if (codeblock) return codeblock;\n        if (hasListBefore) return match;\n        return ' ';\n      })\n      .replace(/<(info|warn)>([^]+?)<\\/(?:\\1)>/g, '\\n**$2**\\n')\n      .replace(/<\\/?p>/g, '') // remove paragraph tags\n      .replace(/<\\/?code>/g, '`') // format code tags\n      .replace(/<a href=\"(.+)\">(.+)<\\/a>/g, '[$2]($1)') // format anchor tags\n      .replace(/\\[(.+?)\\]\\((.+?)\\)/g, '[$1](<$2>)'); // escape markdown links\n  }\n}\n","import type { DocumentationParameter } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\n\n/**\n * Represents a parameter of a {@link DocElement}.\n */\nexport class DocParam extends DocElement {\n  public optional: boolean;\n  public variable: boolean;\n\n  public constructor(parent: DocElement, data: DocumentationParameter) {\n    super(parent.doc, DocTypes.Param, data, parent);\n    this.type = data.type.flat(5);\n    this.optional = data.optional ?? false;\n    this.variable = data.variable ?? false;\n  }\n\n  /**\n   * Returns the formatted name of the parameter.\n   *\n   * If this parameter is optional it will be wrapped in square brackets.\n   * Otherwise just the name will be returned.\n   * Furthermore, in both cases, inline code backticks will be wrapped around the parameter.\n   */\n  public override get formattedName() {\n    return this.optional ? `\\`[${this.name}]\\`` : `\\`${this.name}\\``;\n  }\n\n  /**\n   * Method Parameters cannot be navigated to on the [discord.js docs](https://discord.js.org/) so this always returns `null`.\n   */\n  // eslint-disable-next-line @typescript-eslint/class-literal-property-style\n  public override get url() {\n    return null;\n  }\n}\n","import type { DocumentationClassEvent } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocParam } from './Param';\n\n/**\n * Represents an event on a {@link DocElement}\n *\n * An example of this is the many events on the `Client` class such as `ready`\n */\nexport class DocEvent extends DocElement {\n  public constructor(parent: DocElement, data: DocumentationClassEvent) {\n    super(parent.doc, DocTypes.Event, data, parent);\n    this.adoptAll(data.params, DocParam);\n  }\n\n  /**\n   * Returns the formatted name of the property.\n   *\n   * This includes the parent name, if a parent is present\n   * followed by a `#` and the name of the event.\n   */\n  public override get formattedName() {\n    return `${this.parent?.name ?? ''}#${this.name}`;\n  }\n}\n","import type { DocumentationClassMethod, DocumentationReturns } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocParam } from './Param';\n\n/**\n * Represents a method on a {@link DocElement}\n */\nexport class DocMethod extends DocElement {\n  public constructor(parent: DocElement, data: DocumentationClassMethod) {\n    super(parent.doc, DocTypes.Method, data, parent);\n\n    this.examples = data.examples || null;\n    this.returns = data.returns ?? null;\n    this.scope = data.scope ?? null;\n\n    if (data.params) {\n      this.adoptAll(data.params, DocParam);\n    }\n  }\n\n  /**\n   * Returns the formatted name of the property.\n   *\n   * This includes the parent name, if a parent is present\n   * followed by either a `.` or `#` depending on whether this property is static (`.`) or not (`#`).\n   * and finally the name of the property itself, followed by `()` because this a method.\n   */\n  public override get formattedName() {\n    return `${this.parent?.name ?? ''}${this.static ? '.' : '#'}${this.name}()`;\n  }\n\n  /**\n   * Overrides what should be returned when calling `JSON.stringify` on this class\n   */\n  public override toJSON() {\n    const json = super.toJSON();\n    const returnType = this.returns ? ((this.returns as DocumentationReturns).types || this.returns).flat(5).join('') : 'void';\n\n    json.returns = { type: returnType };\n\n    if (this.returns && (this.returns as DocumentationReturns).description) {\n      json.returns.description = (this.returns as DocumentationReturns).description;\n    }\n\n    return json;\n  }\n}\n","import type { DocumentationClassProperty } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\n\n/**\n * Represents a property on a class.\n */\nexport class DocProp extends DocElement {\n  public constructor(parent: DocElement, data: DocumentationClassProperty) {\n    super(parent.doc, DocTypes.Prop, data, parent);\n    this.scope = data.scope ?? null;\n    this.type = data.type.flat(5);\n    this.nullable = data.nullable || false;\n  }\n\n  /**\n   * Returns the formatted name of the property.\n   *\n   * This includes the parent name, if a parent is present\n   * followed by either a `.` or `#` depending on whether this property is static (`.`) or not (`#`).\n   * and finally the name of the property itself.\n   */\n  public override get formattedName() {\n    return `${this.parent?.name ?? ''}${this.static ? '.' : '#'}${this.name}`;\n  }\n}\n","import type { Doc } from '../Doc';\nimport type { DocumentationClass, DocumentationClassConstructor } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocEvent } from './Event';\nimport { DocMethod } from './Method';\nimport { DocProp } from './Prop';\n\nexport class DocClass extends DocElement {\n  public readonly construct: DocumentationClassConstructor;\n\n  public constructor(doc: Doc, data: DocumentationClass) {\n    super(doc, DocTypes.Class, data);\n\n    this.construct = data.construct;\n\n    this.adoptAll(data.props, DocProp);\n    this.adoptAll(data.methods, DocMethod);\n    this.adoptAll(data.events, DocEvent);\n  }\n}\n","import type { Doc } from '../Doc';\nimport type { DocumentationFunction } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocParam } from './Param';\n\n/**\n * Represents a Function in the DiscordJS documentation\n */\nexport class DocFunction extends DocElement {\n  public constructor(doc: Doc, data: DocumentationFunction) {\n    super(doc, DocTypes.Function, data);\n\n    this.examples = data.examples || null;\n    this.returns = data.returns ?? null;\n    this.scope = data.scope ?? null;\n\n    if (data.params) {\n      this.adoptAll(data.params, DocParam);\n    }\n  }\n}\n","import type { Doc } from '../Doc';\nimport type { DocumentationInterface } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\nimport { DocMethod } from './Method';\nimport { DocProp } from './Prop';\n\n/**\n * Represents an instance of a interface in the DiscordJS documentation\n */\nexport class DocInterface extends DocElement {\n  public constructor(doc: Doc, data: DocumentationInterface) {\n    super(doc, DocTypes.Interface, data);\n    this.adoptAll(data.props, DocProp);\n    this.adoptAll(data.methods, DocMethod);\n  }\n}\n","import type { Doc } from '../Doc';\nimport type { DocumentationTypeDefinition } from '../types/DocgenOutput';\nimport { DocTypes } from '../utils/constants';\nimport { DocElement } from './Element';\n\n/**\n * Represents an instance of a Typedef in the DiscordJS documentation\n */\nexport class DocTypedef extends DocElement {\n  public constructor(doc: Doc, data: DocumentationTypeDefinition) {\n    super(doc, DocTypes.Typedef, data);\n    this.type = data.type?.flat(5) ?? null;\n  }\n}\n"],"mappings":"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","names":["import_utilities","DocTypes"]}
\ No newline at end of file
diff --git a/dist/index.mjs b/dist/index.mjs
index 8ac6d1cae821f6a004441fc24332f0f5f75f82a2..d0bdaa9b295c398dc83e711ff324fa1b6cde0505 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -439,7 +439,7 @@ var _Doc = class extends DocBase {
     /**
      * The documentation base URL.
      */
-    __publicField(this, "baseURL", "https://discord.js.org");
+    __publicField(this, "baseURL", "https://old.discordjs.dev");
     /**
      * The project dissected from the {@link url}.
      */
