// Autogenerated file

export type NodeDocs = {
	classes: PurpleClass[];
	globals: NodeDocsGlobal[];
	methods: NodeDocsMethod[];
	miscs: NodeDocsMisc[];
	modules: NodeDocsModule[];
};

export type PurpleClass = {
	[key: string]: any;
	desc?: string;
	displayName?: string;
	meta?: PurpleMeta;
	methods?: PurpleMethod[];
	modules?: PurpleModule[];
	name: string;
	properties?: ModuleElement[];
	signatures?: StickySignature[];
	source?: string;
	textRaw: string;
	type: TypeEnum;
};

export type PurpleMeta = {
	added?: string[];
	changes: PurpleChange[];
};

export type PurpleChange = {
	description: string;
	'pr-url': string;
	version: string[] | string;
};

export type PurpleMethod = {
	desc: string;
	name: string;
	signatures: PurpleSignature[];
	textRaw: string;
	type: MethodType;
};

export type PurpleSignature = {
	params: PurpleParam[];
};

export type PurpleParam = {
	name: string;
	textRaw: string;
	type: ParamType;
};

export enum ParamType {
	Function = 'Function',
	Number = 'number',
	Object = 'Object',
	String = 'string',
	StringBufferUint8Array = 'string|Buffer|Uint8Array',
	StringString = 'string|string[]',
}

export enum MethodType {
	Method = 'method',
}

export type PurpleModule = {
	desc: string;
	displayName: string;
	name: string;
	textRaw: string;
	type: TypeEnum;
};

export enum TypeEnum {
	Class = 'class',
	Misc = 'misc',
	Module = 'module',
}

export type FluffyReturn = {
	desc?: string;
	name: Name;
	options?: EventElement[];
	textRaw: string;
	type: string;
};

export type IndigoParam = {
	default?: string;
	desc?: string;
	name: string;
	options?: EventElement[];
	textRaw: string;
	type: string;
};

export type EventSignature = {
	params: IndigoParam[];
	return?: EventElement;
};

export type MethodElement = {
	default?: string;
	desc?: string;
	meta?: PurpleMeta;
	name?: string;
	options?: MethodElement[];
	params?: ModuleElement[];
	properties?: ModuleElement[];
	signatures?: EventSignature[];
	textRaw: string;
	type?: string;
};

export type StickyParam = {
	desc?: string;
	name: string;
	options?: MethodElement[];
	textRaw: string;
	type: string;
};

export type FluffySignature = {
	params: StickyParam[];
	return?: FluffyReturn;
};

export type TentacledParam = {
	desc?: string;
	name: string;
	options?: ModuleElement[];
	textRaw: string;
	type: string;
};

export type EventElement = {
	default?: string;
	desc?: string;
	displayName?: string;
	meta?: PurpleMeta;
	methods?: PropertyElement[];
	modules?: PurpleModule[];
	name: string;
	options?: EventElement[];
	params?: TentacledParam[];
	shortDesc?: string;
	signatures?: FluffySignature[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type?: string;
};

export type ModuleElement = {
	default?: string;
	desc?: string;
	displayName?: string;
	events?: EventElement[];
	meta?: FluffyMeta;
	miscs?: ModuleElement[];
	name?: string;
	options?: ModuleElement[];
	params?: ModuleElement[];
	signatures?: TentacledSignature[];
	textRaw: string;
	type?: string;
};

export enum Name {
	Return = 'return',
}

export type PropertyElement = {
	default?: string;
	desc?: string;
	displayName?: string;
	meta?: PurpleMeta;
	miscs?: PropertyElement[];
	modules?: PropertyElement[];
	name?: string;
	options?: PropertyElement[];
	params?: any[];
	shortDesc?: string;
	signatures?: CtorSignature[];
	textRaw: string;
	type?: string;
};

export type CtorSignature = {
	params: FluffyParam[];
	return?: PurpleReturn;
};

export type FluffyParam = {
	default?: string;
	desc?: string;
	name: string;
	options?: OptionElement[];
	textRaw: string;
	type: ParamType;
};

export type OptionElement = {
	default?: string;
	desc?: string;
	name: string;
	textRaw: string;
	type: string;
};

export type PurpleReturn = {
	desc?: string;
	name: Name;
	textRaw: string;
	type: string;
};

export type FluffyMeta = {
	added?: string[];
	changes: FluffyChange[];
};

export type FluffyChange = {
	description: string;
	'pr-url': string;
	version: string;
};

export type TentacledSignature = {
	params: OptionElement[];
	return?: PurpleReturn;
};

export type StickySignature = {
	desc: string;
	params: PurpleParam[];
};

export type NodeDocsGlobal = {
	classes?: GlobalClass[];
	desc: string;
	introduced_in?: string;
	meta?: PurpleMeta;
	methods?: GlobalMethod[];
	modules?: ModuleElement[];
	name: string;
	properties?: GlobalProperty[];
	source: Source;
	textRaw: string;
	type: GlobalType;
};

export type GlobalClass = {
	classMethods?: EventElement[];
	desc?: string;
	events?: PurpleEvent[];
	meta?: PurpleMeta;
	methods?: FluffyMethod[];
	name: string;
	properties?: PurpleProperty[];
	textRaw: string;
	type: TypeEnum;
};

export type PurpleEvent = {
	desc: string;
	meta: PurpleMeta;
	name: string;
	params: ModuleElement[];
	textRaw: string;
	type: EventType;
};

export enum EventType {
	Event = 'event',
}

export type FluffyMethod = {
	desc: string;
	meta: PurpleMeta;
	name: string;
	signatures: IndigoSignature[];
	stability?: number;
	stabilityText?: MethodStabilityText;
	textRaw: string;
	type: MethodType;
};

export type IndigoSignature = {
	params: MethodElement[];
	return?: MethodElement;
};

export enum MethodStabilityText {
	DeprecatedUseSubpathPatternsInstead = 'Deprecated: Use subpath patterns instead.',
	Experimental = 'Experimental',
}

export type PurpleProperty = {
	desc: string;
	meta: PurpleMeta;
	name: string;
	textRaw: string;
	type: string;
};

export type GlobalMethod = {
	desc: string;
	meta: PurpleMeta;
	modules?: ModuleElement[];
	name: string;
	signatures: IndigoSignature[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: MethodType;
};

export type GlobalProperty = {
	desc?: string;
	meta?: EventMeta;
	methods?: EventElement[];
	modules?: PropertyElement[];
	name: string;
	properties?: PropertyElement[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: string;
};

export type EventMeta = {
	added?: string[];
	changes: TentacledChange[];
	deprecated?: string[];
};

export type TentacledChange = {
	commit?: string;
	description: string;
	'pr-url'?: string;
	version: string[] | string;
};

export enum Source {
	DocAPIGlobalsMd = 'doc/api/globals.md',
	DocAPIProcessMd = 'doc/api/process.md',
}

export enum GlobalType {
	Global = 'global',
}

export type NodeDocsMethod = {
	desc: string;
	meta?: PurpleMeta;
	name: string;
	signatures: PurpleSignature[];
	source: Source;
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: MethodType;
};

export type NodeDocsMisc = {
	classes?: PurpleClass[];
	desc?: string;
	globals?: MiscGlobal[];
	introduced_in: string;
	meta?: PurpleMeta;
	methods?: EventElement[];
	miscs: PurpleMisc[];
	name: string;
	properties?: MiscProperty[];
	source: string;
	stability?: number;
	stabilityText?: MiscStabilityText;
	textRaw: string;
	type: TypeEnum;
};

export type MiscGlobal = {
	classes?: GlobalClass[];
	desc: string;
	meta: PurpleMeta;
	methods?: EventElement[];
	name: string;
	properties?: PropertyElement[];
	textRaw: string;
	type: GlobalType;
};

export type PurpleMisc = {
	desc?: string;
	displayName?: string;
	meta?: PurpleMeta;
	miscs?: PurpleClass[];
	modules?: MiscModule[];
	name: string;
	properties?: MethodElement[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: TypeEnum;
};

export type MiscModule = {
	desc?: string;
	displayName: string;
	meta?: TentacledMeta;
	modules?: FluffyModule[];
	name: string;
	properties?: MethodElement[];
	stability?: number;
	stabilityText?: MethodStabilityText;
	textRaw: string;
	type: TypeEnum;
};

export type TentacledMeta = {
	added?: string[];
	changes: StickyChange[];
	napiVersion?: number[];
	removed?: string[];
};

export type StickyChange = {
	commit?: string;
	description: string;
	'pr-url'?: string[] | string;
	version: string[] | string;
};

export type FluffyModule = {
	desc: string;
	displayName: string;
	meta?: StickyMeta;
	name: string;
	stability?: number;
	stabilityText?: MethodStabilityText;
	textRaw: string;
	type: TypeEnum;
};

export type StickyMeta = {
	added?: string[];
	changes: TentacledChange[];
	napiVersion?: number[];
};

export type MiscProperty = {
	desc: string;
	methods: EventElement[];
	name: string;
	properties: EventElement[];
	textRaw: string;
	type: ParamType;
};

export enum MiscStabilityText {
	Deprecated = 'Deprecated',
	Experimental = 'Experimental',
	Legacy = 'Legacy',
	Stable = 'Stable',
}

export type NodeDocsModule = {
	classes?: FluffyClass[];
	desc?: string;
	displayName?: string;
	events?: MethodElement[];
	introduced_in?: string;
	meta?: IndigoMeta;
	methods?: StickyMethod[];
	miscs?: ModuleMisc[];
	modules?: TentacledModule[];
	name: string;
	properties?: IndigoProperty[];
	source: string;
	stability?: number;
	stabilityText?: MiscStabilityText;
	textRaw: string;
	type: TypeEnum;
	vars?: FluffyVar[];
};

export type FluffyClass = {
	classMethods?: ModuleElement[];
	desc?: string;
	events?: FluffyEvent[];
	meta?: EventMeta;
	methods?: TentacledMethod[];
	modules?: ClassModule[];
	name: string;
	properties?: FluffyProperty[];
	signatures?: IndecentSignature[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: TypeEnum;
};

export type FluffyEvent = {
	desc: string;
	meta?: EventMeta;
	name: string;
	params: PropertyElement[];
	textRaw: string;
	type: EventType;
};

export type TentacledMethod = {
	desc?: string;
	meta?: EventMeta;
	methods?: PropertyElement[];
	modules?: PropertyElement[];
	name: string;
	properties?: MethodElement[];
	signatures: IndigoSignature[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: MethodType;
};

export type ClassModule = {
	ctors?: EventElement[];
	desc: string;
	displayName: string;
	meta?: PurpleMeta;
	methods?: EventElement[];
	modules?: PropertyElement[];
	name: string;
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: TypeEnum;
};

export type FluffyProperty = {
	default?: string;
	desc?: string;
	meta?: EventMeta;
	methods?: EventElement[];
	name: string;
	options?: EventElement[];
	shortDesc?: string;
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type?: string;
};

export type IndecentSignature = {
	desc?: string;
	params: MethodElement[];
	return?: MethodElement;
};

export type IndigoMeta = {
	added?: string[];
	changes: FluffyChange[];
	deprecated?: string[];
};

export type StickyMethod = {
	desc?: string;
	meta?: EventMeta;
	methods?: PropertyElement[];
	miscs?: PropertyElement[];
	modules?: PropertyElement[];
	name: string;
	properties?: PropertyElement[];
	signatures: HilariousSignature[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: MethodType;
};

export type HilariousSignature = {
	params: PropertyElement[];
	return?: PropertyElement;
};

export type ModuleMisc = {
	desc?: string;
	introduced_in?: string;
	meta?: PurpleMeta;
	methods?: MethodElement[];
	miscs?: FluffyMisc[];
	name: string;
	textRaw: string;
	type: TypeEnum;
};

export type FluffyMisc = {
	classes?: GlobalClass[];
	ctors?: PropertyElement[];
	desc?: string;
	displayName?: string;
	events?: ModuleElement[];
	examples?: ModuleElement[];
	meta?: PurpleMeta;
	methods?: IndigoMethod[];
	miscs?: ModuleElement[];
	modules?: ModuleElement[];
	name: string;
	textRaw: string;
	type: TypeEnum;
};

export type IndigoMethod = {
	desc: string;
	meta?: PurpleMeta;
	name: string;
	signatures: AmbitiousSignature[];
	textRaw: string;
	type: MethodType;
};

export type AmbitiousSignature = {
	params: ModuleElement[];
	return?: ModuleElement;
};

export type TentacledModule = {
	classes?: TentacledClass[];
	desc?: string;
	displayName: string;
	meta?: PurpleMeta;
	methods?: IndecentMethod[];
	miscs?: EventElement[];
	modules?: StickyModule[];
	name: string;
	properties?: StickyProperty[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: TypeEnum;
	vars?: PurpleVar[];
};

export type TentacledClass = {
	desc?: string;
	events?: EventElement[];
	meta?: IndigoMeta;
	methods?: MethodElement[];
	modules?: EventElement[];
	name: string;
	properties?: TentacledProperty[];
	signatures?: CunningSignature[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: TypeEnum;
};

export type TentacledProperty = {
	default?: string;
	desc: string;
	meta?: IndigoMeta;
	modules?: ModuleElement[];
	name: string;
	shortDesc?: string;
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type?: string;
};

export type CunningSignature = {
	desc: string;
	params: ModuleElement[];
};

export type IndecentMethod = {
	desc?: string;
	meta?: EventMeta;
	miscs?: ModuleElement[];
	modules?: ModuleElement[];
	name: string;
	properties?: ModuleElement[];
	signatures: MagentaSignature[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: MethodType;
};

export type MagentaSignature = {
	params: EventElement[];
	return?: EventElement;
};

export type StickyModule = {
	classes?: MethodElement[];
	desc?: string;
	displayName: string;
	meta?: PurpleMeta;
	methods?: ModuleElement[];
	modules?: PurpleClass[];
	name: string;
	properties?: PropertyElement[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: TypeEnum;
};

export type StickyProperty = {
	default?: string;
	desc?: string;
	meta?: EventMeta;
	methods?: PropertyElement[];
	modules?: PropertyElement[];
	name: string;
	properties?: PropertyElement[];
	shortDesc?: string;
	stability?: number;
	stabilityText?: MiscStabilityText;
	textRaw: string;
	type?: string;
};

export type PurpleVar = {
	desc: string;
	meta: PurpleMeta;
	methods?: EventElement[];
	name: string;
	properties?: VarMethod[];
	textRaw: string;
	type: string;
};

export type VarMethod = {
	desc: string;
	meta: EventMeta;
	modules?: ModuleElement[];
	name: string;
	signatures?: AmbitiousSignature[];
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type: string;
};

export type IndigoProperty = {
	default?: string;
	desc?: string;
	meta?: EventMeta;
	methods?: VarMethod[];
	name: string;
	options?: ModuleElement[];
	properties?: ModuleElement[];
	shortDesc?: string;
	stability?: number;
	stabilityText?: string;
	textRaw: string;
	type?: string;
};

export type FluffyVar = {
	desc: string;
	meta: PurpleMeta;
	methods: ModuleElement[];
	name: TypeEnum;
	properties: VarMethod[];
	textRaw: string;
	type: string;
};
